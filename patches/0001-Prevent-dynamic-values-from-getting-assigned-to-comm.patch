From 580a2c9c5b9d56324f8b570937a20715329af6bd Mon Sep 17 00:00:00 2001
From: Christian Kandeler <christian.kandeler@qt.io>
Date: Mon, 22 Oct 2018 17:28:44 +0200
Subject: [PATCH] Prevent "dynamic" values from getting assigned to command
 properties

Values such as artifact objects are not plain data and we therefore must
not attempt to make deep copies of them. Catch attempts to assign them
to command properties.

Fixes: QBS-1404
Change-Id: I1fa02720a3543cd8e2c734ed9437d31b5a573d57
---
 src/lib/corelib/buildgraph/rulecommands.cpp      |  4 +++-
 .../p.qbs                                        |  4 ++--
 .../invalid-command-property.qbs                 | 16 +++++++++++-----
 tests/auto/blackbox/tst_blackbox.cpp             | 12 ++++++++++++
 tests/auto/blackbox/tst_blackbox.h               |  1 +
 5 files changed, 29 insertions(+), 8 deletions(-)

diff --git a/src/lib/corelib/buildgraph/rulecommands.cpp b/src/lib/corelib/buildgraph/rulecommands.cpp
index c2aad1ce1..9ccdb0bfc 100644
--- a/src/lib/corelib/buildgraph/rulecommands.cpp
+++ b/src/lib/corelib/buildgraph/rulecommands.cpp
@@ -146,7 +146,9 @@ void AbstractCommand::applyCommandProperties(const QScriptValue *scriptValue)
         if (m_predefinedProperties.contains(it.name()))
             continue;
         const QVariant value = it.value().toVariant();
-        if (QMetaType::Type(value.type()) == QMetaType::QObjectStar) {
+        if (QMetaType::Type(value.type()) == QMetaType::QObjectStar
+                || it.value().scriptClass()
+                || it.value().data().isValid()) {
             throw ErrorInfo(Tr::tr("Property '%1' has a type unsuitable for storing in a command "
                                    "object.").arg(it.name()), m_codeLocation);
         }
diff --git a/tests/auto/blackbox/testdata/generated-artifact-as-input-to-dynamic-rule/p.qbs b/tests/auto/blackbox/testdata/generated-artifact-as-input-to-dynamic-rule/p.qbs
index f26d92262..06b62b7cc 100644
--- a/tests/auto/blackbox/testdata/generated-artifact-as-input-to-dynamic-rule/p.qbs
+++ b/tests/auto/blackbox/testdata/generated-artifact-as-input-to-dynamic-rule/p.qbs
@@ -46,8 +46,8 @@ Product {
             var cmd = new JavaScriptCommand();
             var output = outputs["mytype.final"][0];
             cmd.description = "generating " + output.fileName;
-            cmd.output = output;
-            cmd.sourceCode = function() { File.copy(input.filePath, output.filePath); };
+            cmd.outputFilePath = output.filePath;
+            cmd.sourceCode = function() { File.copy(input.filePath, outputFilePath); };
             return [cmd];
         }
     }
diff --git a/tests/auto/blackbox/testdata/invalid-command-property/invalid-command-property.qbs b/tests/auto/blackbox/testdata/invalid-command-property/invalid-command-property.qbs
index 65437311e..f9412f30d 100644
--- a/tests/auto/blackbox/testdata/invalid-command-property/invalid-command-property.qbs
+++ b/tests/auto/blackbox/testdata/invalid-command-property/invalid-command-property.qbs
@@ -2,6 +2,8 @@ import qbs
 import qbs.TextFile
 
 Product {
+    name: "p"
+    property string errorType
     type: ["output"]
     Group {
         files: ["input.txt"]
@@ -16,11 +18,15 @@ Product {
         prepare: {
             var cmd = new JavaScriptCommand();
             cmd.description = "Creating output";
-            cmd.textFile = new TextFile(input.filePath, TextFile.ReadOnly);
-            cmd.sourceCode = function() {
-                var content = textFile.readAll();
-                textFile.close();
-            }
+            if (product.errorType === "qobject")
+                cmd.dummy = new TextFile(input.filePath, TextFile.ReadOnly);
+            else if (product.errorType === "input")
+                cmd.dummy = input;
+            else if (product.errorType === "artifact")
+                cmd.dummy = product.artifacts.qbs[0];
+            else
+                throw "invalid error type " + product.errorType;
+            cmd.sourceCode = function() { }
             return [cmd];
         }
     }
diff --git a/tests/auto/blackbox/tst_blackbox.cpp b/tests/auto/blackbox/tst_blackbox.cpp
index 0a846ede7..b87d66f28 100644
--- a/tests/auto/blackbox/tst_blackbox.cpp
+++ b/tests/auto/blackbox/tst_blackbox.cpp
@@ -3636,9 +3636,21 @@ void TestBlackbox::installTree()
     QVERIFY(QFile::exists(installRoot + "content/subdir2/baz.txt"));
 }
 
+void TestBlackbox::invalidCommandProperty_data()
+{
+    QTest::addColumn<QString>("errorType");
+
+    QTest::newRow("assigning QObject") << QString("qobject");
+    QTest::newRow("assigning input artifact") << QString("input");
+    QTest::newRow("assigning other artifact") << QString("artifact");
+}
+
 void TestBlackbox::invalidCommandProperty()
 {
     QDir::setCurrent(testDataDir + "/invalid-command-property");
+    QFETCH(QString, errorType);
+    QCOMPARE(runQbs(QbsRunParameters("resolve", QStringList("products.p.errorType:" + errorType))),
+             0);
     QbsRunParameters params;
     params.expectFailure = true;
     QVERIFY(runQbs(params) != 0);
diff --git a/tests/auto/blackbox/tst_blackbox.h b/tests/auto/blackbox/tst_blackbox.h
index 58cc8f6fb..343942f4b 100644
--- a/tests/auto/blackbox/tst_blackbox.h
+++ b/tests/auto/blackbox/tst_blackbox.h
@@ -136,6 +136,7 @@ private slots:
     void installPackage();
     void installRootFromProjectFile();
     void installTree();
+    void invalidCommandProperty_data();
     void invalidCommandProperty();
     void invalidExtensionInstantiation();
     void invalidExtensionInstantiation_data();
-- 
2.17.1

