#!/usr/bin/python3
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

import sys, os, json, re, requests

def download(url, filename):
    import hashlib
    sha256 = hashlib.sha256()
    destfilename = os.path.join("/tmp", filename)
    with open(destfilename, "wb") as fp:
        print("Downloading %s" % url)
        response = requests.get(url)
        fp.write(response.content)
        sha256.update(response.content)
    return (destfilename, sha256.hexdigest())

if __name__ == "__main__":
    import shutil

    try:
        version = sys.argv[1]
    except IndexError:
        version = None

    if not version:
        print("Usage: update-qt [version]", file=sys.stderr)
        sys.exit(1)

    if not version.startswith("v"):
        m = re.search(r'^(\d+\.\d+)\.\d+(-(?:alpha|beta|rc))*', version)
        if m:
            major = m.group(1)
            if m.group(2):
                download_url = "http://download.qt.io/development_releases/qt/%s/%s/submodules" % (major, version)
            else:
                download_url = "http://download.qt.io/official_releases/qt/%s/%s/submodules" % (major, version)
        else:
            print("Wrong version specified, use the MAJOR.MINOR.PATCHLEVEL format", file=sys.stderr)
            sys.exit(1)

    fp = open("io.liri.Sdk.json", "r")
    data = json.loads(fp.read())
    for module in data.get("modules", []):
        if module["name"].startswith("qt5-") and len(module.get("sources", [])) >= 1:
            m = re.search(r'qt5-(.+)', module["name"])
            if m:
                module_name = m.group(1)

                if version.startswith("v"):
                    module["sources"][0] = {
                        "type": "git",
                        "url": "git://code.qt.io/qt/%s.git" % module_name,
                        "branch": version
                    }
                else:
                    filename = "%s-opensource-src-%s.tar.xz" % (module_name, version)

                    destfilename, sha256 = download(download_url + "/" + filename, filename)
                    finaldir = os.path.join(".flatpak-builder", "downloads", sha256)
                    if not os.path.exists(finaldir):
                        os.makedirs(finaldir)
                    shutil.move(destfilename, os.path.join(finaldir, filename))

                    module["sources"][0] = {
                        "type": "archive",
                        "url": download_url + "/" + filename,
                        "sha256": sha256
                    }
            else:
                print("Failed to parse module name for %s" % module["name"], file=sys.stderr)
                sys.exit(1)

    with open("io.liri.Sdk.json", "w") as fp:
        fp.write(json.dumps(data, sort_keys=True, indent=4))
